//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Prefabs/Input/EmpireAtWar.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputComponent_Generated: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputComponent_Generated()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EmpireAtWar"",
    ""maps"": [
        {
            ""name"": ""TouchMap"",
            ""id"": ""ac4a8204-04fc-4f79-a6dc-090164689d8d"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""Button"",
                    ""id"": ""3271e749-e7c0-4a02-86da-5f80dcc04a8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""34317922-b446-4c12-a934-bbc4ae0202ba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPhase"",
                    ""type"": ""Value"",
                    ""id"": ""a846cc5c-2073-4fe4-a6c8-9361e7ac5d35"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""90a4dae7-9460-448e-9a05-3a94c8d3043d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""139bdbb5-681e-4dc3-b3ae-57b2a24fe5e9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchCount"",
                    ""type"": ""Value"",
                    ""id"": ""91b6625d-d574-4474-90c6-128c53569c66"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""af90b00b-2773-4ec4-af6c-c0f24500764b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24a90077-608d-469a-865c-fe1ba962f17d"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""798f40b7-b636-4a99-b140-ec407fac07ec"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1dc184f-1d6d-4755-bd33-4898d8df1d6d"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fcea9c7-0300-4b4f-8241-ff8625e1ea7d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ccd9519-99f5-4784-9b57-53d12a64b4d2"",
                    ""path"": ""<Touchscreen>/primaryTouch/phase"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""TouchPhase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25469d18-fa4a-4437-954d-76177ae7f35d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""TouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be1b4665-7c8b-45c6-9c6b-ef688587aefa"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=2,y=2)"",
                    ""groups"": ""Touch"",
                    ""action"": ""TouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9943e47-5eb5-4b3d-8d8e-9a774e19fba3"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5680e10-94d4-48c4-ac70-d4abb642553a"",
                    ""path"": ""<Mouse>/clickCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""TouchCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad04c16a-8211-4638-b75c-740da2681ed0"",
                    ""path"": ""<Touchscreen>/primaryTouch/tapCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""TouchCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""966f2b1d-ee5c-4d9b-9be9-9ba58c0bd8ad"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SecondaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TouchMap
        m_TouchMap = asset.FindActionMap("TouchMap", throwIfNotFound: true);
        m_TouchMap_PrimaryContact = m_TouchMap.FindAction("PrimaryContact", throwIfNotFound: true);
        m_TouchMap_PrimaryPosition = m_TouchMap.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_TouchMap_TouchPhase = m_TouchMap.FindAction("TouchPhase", throwIfNotFound: true);
        m_TouchMap_TouchDelta = m_TouchMap.FindAction("TouchDelta", throwIfNotFound: true);
        m_TouchMap_Scroll = m_TouchMap.FindAction("Scroll", throwIfNotFound: true);
        m_TouchMap_TouchCount = m_TouchMap.FindAction("TouchCount", throwIfNotFound: true);
        m_TouchMap_SecondaryPosition = m_TouchMap.FindAction("SecondaryPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchMap
    private readonly InputActionMap m_TouchMap;
    private List<ITouchMapActions> m_TouchMapActionsCallbackInterfaces = new List<ITouchMapActions>();
    private readonly InputAction m_TouchMap_PrimaryContact;
    private readonly InputAction m_TouchMap_PrimaryPosition;
    private readonly InputAction m_TouchMap_TouchPhase;
    private readonly InputAction m_TouchMap_TouchDelta;
    private readonly InputAction m_TouchMap_Scroll;
    private readonly InputAction m_TouchMap_TouchCount;
    private readonly InputAction m_TouchMap_SecondaryPosition;
    public struct TouchMapActions
    {
        private @InputComponent_Generated m_Wrapper;
        public TouchMapActions(@InputComponent_Generated wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_TouchMap_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_TouchMap_PrimaryPosition;
        public InputAction @TouchPhase => m_Wrapper.m_TouchMap_TouchPhase;
        public InputAction @TouchDelta => m_Wrapper.m_TouchMap_TouchDelta;
        public InputAction @Scroll => m_Wrapper.m_TouchMap_Scroll;
        public InputAction @TouchCount => m_Wrapper.m_TouchMap_TouchCount;
        public InputAction @SecondaryPosition => m_Wrapper.m_TouchMap_SecondaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMapActions set) { return set.Get(); }
        public void AddCallbacks(ITouchMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Add(instance);
            @PrimaryContact.started += instance.OnPrimaryContact;
            @PrimaryContact.performed += instance.OnPrimaryContact;
            @PrimaryContact.canceled += instance.OnPrimaryContact;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            @TouchPhase.started += instance.OnTouchPhase;
            @TouchPhase.performed += instance.OnTouchPhase;
            @TouchPhase.canceled += instance.OnTouchPhase;
            @TouchDelta.started += instance.OnTouchDelta;
            @TouchDelta.performed += instance.OnTouchDelta;
            @TouchDelta.canceled += instance.OnTouchDelta;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @TouchCount.started += instance.OnTouchCount;
            @TouchCount.performed += instance.OnTouchCount;
            @TouchCount.canceled += instance.OnTouchCount;
            @SecondaryPosition.started += instance.OnSecondaryPosition;
            @SecondaryPosition.performed += instance.OnSecondaryPosition;
            @SecondaryPosition.canceled += instance.OnSecondaryPosition;
        }

        private void UnregisterCallbacks(ITouchMapActions instance)
        {
            @PrimaryContact.started -= instance.OnPrimaryContact;
            @PrimaryContact.performed -= instance.OnPrimaryContact;
            @PrimaryContact.canceled -= instance.OnPrimaryContact;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
            @TouchPhase.started -= instance.OnTouchPhase;
            @TouchPhase.performed -= instance.OnTouchPhase;
            @TouchPhase.canceled -= instance.OnTouchPhase;
            @TouchDelta.started -= instance.OnTouchDelta;
            @TouchDelta.performed -= instance.OnTouchDelta;
            @TouchDelta.canceled -= instance.OnTouchDelta;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @TouchCount.started -= instance.OnTouchCount;
            @TouchCount.performed -= instance.OnTouchCount;
            @TouchCount.canceled -= instance.OnTouchCount;
            @SecondaryPosition.started -= instance.OnSecondaryPosition;
            @SecondaryPosition.performed -= instance.OnSecondaryPosition;
            @SecondaryPosition.canceled -= instance.OnSecondaryPosition;
        }

        public void RemoveCallbacks(ITouchMapActions instance)
        {
            if (m_Wrapper.m_TouchMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchMapActions @TouchMap => new TouchMapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ITouchMapActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnTouchPhase(InputAction.CallbackContext context);
        void OnTouchDelta(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnTouchCount(InputAction.CallbackContext context);
        void OnSecondaryPosition(InputAction.CallbackContext context);
    }
}
